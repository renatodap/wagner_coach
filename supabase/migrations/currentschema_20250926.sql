-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.active_workout_sessions (
  id integer NOT NULL DEFAULT nextval('active_workout_sessions_id_seq'::regclass),
  user_id uuid,
  user_workout_id integer,
  workout_id integer,
  status text NOT NULL CHECK (status = ANY (ARRAY['active'::text, 'paused'::text, 'completed'::text])),
  started_at timestamp with time zone DEFAULT now(),
  paused_at timestamp with time zone,
  resumed_at timestamp with time zone,
  total_pause_duration_seconds integer DEFAULT 0,
  current_exercise_index integer DEFAULT 0,
  current_set_index integer DEFAULT 0,
  exercise_completions jsonb DEFAULT '[]'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT active_workout_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT active_workout_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT active_workout_sessions_user_workout_id_fkey FOREIGN KEY (user_workout_id) REFERENCES public.user_workouts(id),
  CONSTRAINT active_workout_sessions_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.activities (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  source text NOT NULL CHECK (source = ANY (ARRAY['strava'::text, 'garmin'::text, 'manual'::text, 'apple'::text, 'fitbit'::text, 'polar'::text, 'suunto'::text, 'wahoo'::text])),
  external_id text,
  name text NOT NULL,
  activity_type text NOT NULL,
  sport_type text,
  start_date timestamp with time zone NOT NULL,
  end_date timestamp with time zone,
  timezone text,
  utc_offset integer,
  elapsed_time_seconds integer NOT NULL,
  moving_time_seconds integer,
  distance_meters numeric,
  average_speed numeric,
  max_speed numeric,
  total_elevation_gain numeric,
  total_elevation_loss numeric,
  elevation_high numeric,
  elevation_low numeric,
  average_heartrate integer,
  max_heartrate integer,
  min_heartrate integer,
  heartrate_zones jsonb,
  average_power numeric,
  max_power integer,
  normalized_power numeric,
  intensity_factor numeric,
  tss numeric,
  power_zones jsonb,
  kilojoules numeric,
  average_cadence numeric,
  max_cadence integer,
  average_stride_length numeric,
  average_vertical_oscillation numeric,
  average_ground_contact_time integer,
  average_ground_contact_balance numeric,
  average_vertical_ratio numeric,
  pool_length numeric,
  total_strokes integer,
  average_stroke_rate numeric,
  average_swolf numeric,
  lap_count integer,
  total_reps integer,
  total_sets integer,
  total_weight_lifted_kg numeric,
  exercise_count integer,
  muscle_groups ARRAY,
  total_shots integer,
  forehand_count integer,
  backhand_count integer,
  serve_count integer,
  volley_count integer,
  winner_count integer,
  unforced_error_count integer,
  ace_count integer,
  double_fault_count integer,
  first_serve_percentage numeric,
  points_won_percentage numeric,
  match_duration_minutes integer,
  sets_played integer,
  games_played integer,
  average_distance_per_stroke numeric,
  average_split_time integer,
  poses_held integer,
  average_hold_duration integer,
  flexibility_score integer,
  calories integer,
  active_calories integer,
  training_load numeric,
  aerobic_training_effect numeric,
  anaerobic_training_effect numeric,
  recovery_time_hours integer,
  vo2max_estimate numeric,
  fitness_level integer,
  perceived_exertion integer CHECK (perceived_exertion >= 1 AND perceived_exertion <= 10),
  mood text CHECK (mood = ANY (ARRAY['terrible'::text, 'bad'::text, 'okay'::text, 'good'::text, 'amazing'::text])),
  energy_level integer CHECK (energy_level >= 1 AND energy_level <= 5),
  soreness_level integer CHECK (soreness_level >= 0 AND soreness_level <= 10),
  stress_level integer CHECK (stress_level >= 0 AND stress_level <= 10),
  sleep_quality integer CHECK (sleep_quality >= 1 AND sleep_quality <= 10),
  workout_rating integer CHECK (workout_rating >= 1 AND workout_rating <= 5),
  weather_conditions text,
  temperature_celsius numeric,
  humidity_percentage integer,
  wind_speed_kmh numeric,
  wind_direction integer,
  precipitation text,
  air_quality_index integer,
  indoor boolean DEFAULT false,
  gear_id text,
  location text,
  route_name text,
  city text,
  state text,
  country text,
  start_lat numeric,
  start_lng numeric,
  end_lat numeric,
  end_lng numeric,
  workout_id integer,
  notes text,
  private_notes text,
  photos ARRAY,
  videos ARRAY,
  map_polyline text,
  kudos_count integer DEFAULT 0,
  comment_count integer DEFAULT 0,
  photo_count integer DEFAULT 0,
  visibility text DEFAULT 'private'::text CHECK (visibility = ANY (ARRAY['private'::text, 'followers'::text, 'public'::text])),
  commute boolean DEFAULT false,
  trainer boolean DEFAULT false,
  race boolean DEFAULT false,
  workout_type text,
  weather_data jsonb,
  raw_data jsonb,
  laps jsonb,
  splits jsonb,
  segments jsonb,
  device_name text,
  device_manufacturer text,
  upload_source text,
  file_format text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  synced_at timestamp with time zone,
  CONSTRAINT activities_pkey PRIMARY KEY (id),
  CONSTRAINT activities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT activities_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.activity_segments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  activity_id uuid,
  segment_type text NOT NULL CHECK (segment_type = ANY (ARRAY['lap'::text, 'interval'::text, 'set'::text, 'split'::text, 'circuit'::text, 'round'::text])),
  segment_index integer NOT NULL,
  start_time timestamp with time zone,
  elapsed_time_seconds integer,
  moving_time_seconds integer,
  distance_meters numeric,
  average_speed numeric,
  max_speed numeric,
  average_pace text,
  average_heartrate integer,
  max_heartrate integer,
  min_heartrate integer,
  exercise_name text,
  reps integer,
  weight_kg numeric,
  average_cadence numeric,
  average_power numeric,
  normalized_power numeric,
  calories integer,
  elevation_gain numeric,
  elevation_loss numeric,
  average_stroke_rate numeric,
  stroke_count integer,
  notes text,
  raw_data jsonb,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT activity_segments_pkey PRIMARY KEY (id),
  CONSTRAINT activity_segments_activity_id_fkey FOREIGN KEY (activity_id) REFERENCES public.activities(id)
);
CREATE TABLE public.activity_streams (
  activity_id uuid NOT NULL,
  stream_type text NOT NULL CHECK (stream_type = ANY (ARRAY['heartrate'::text, 'cadence'::text, 'power'::text, 'speed'::text, 'altitude'::text, 'distance'::text, 'temperature'::text, 'grade'::text, 'battery'::text, 'calories'::text, 'lap_time'::text, 'moving'::text])),
  data_points jsonb NOT NULL,
  data_type text CHECK (data_type = ANY (ARRAY['integer'::text, 'float'::text, 'boolean'::text, 'string'::text])),
  resolution text CHECK (resolution = ANY (ARRAY['high'::text, 'medium'::text, 'low'::text, 'raw'::text])),
  original_size integer,
  series_type text CHECK (series_type = ANY (ARRAY['time'::text, 'distance'::text])),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT activity_streams_pkey PRIMARY KEY (activity_id, stream_type),
  CONSTRAINT activity_streams_activity_id_fkey FOREIGN KEY (activity_id) REFERENCES public.activities(id)
);
CREATE TABLE public.activity_workout_links (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  activity_id uuid NOT NULL,
  custom_workout_id uuid,
  standard_workout_id integer,
  link_type text DEFAULT 'manual'::text CHECK (link_type = ANY (ARRAY['automatic'::text, 'manual'::text, 'suggested'::text])),
  confidence_score numeric,
  match_reason text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT activity_workout_links_pkey PRIMARY KEY (id),
  CONSTRAINT activity_workout_links_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT activity_workout_links_activity_id_fkey FOREIGN KEY (activity_id) REFERENCES public.activities(id),
  CONSTRAINT activity_workout_links_standard_workout_id_fkey FOREIGN KEY (standard_workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.ai_conversations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  messages jsonb NOT NULL DEFAULT '[]'::jsonb,
  embedding USER-DEFINED,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  context_used jsonb DEFAULT '{}'::jsonb,
  last_message_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_conversations_pkey PRIMARY KEY (id),
  CONSTRAINT ai_conversations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.conversation_summaries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  conversation_id uuid,
  summary text NOT NULL,
  key_topics ARRAY,
  extracted_facts ARRAY,
  action_items ARRAY,
  sentiment character varying CHECK (sentiment::text = ANY (ARRAY['positive'::character varying, 'neutral'::character varying, 'frustrated'::character varying, 'motivated'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT conversation_summaries_pkey PRIMARY KEY (id),
  CONSTRAINT conversation_summaries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT conversation_summaries_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.ai_conversations(id)
);
CREATE TABLE public.equipment_types (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  category text CHECK (category = ANY (ARRAY['free_weight'::text, 'machine'::text, 'cable'::text, 'bodyweight'::text, 'cardio'::text, 'other'::text])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT equipment_types_pkey PRIMARY KEY (id)
);
CREATE TABLE public.exercise_categories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  description text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT exercise_categories_pkey PRIMARY KEY (id)
);
CREATE TABLE public.exercise_completions (
  id integer NOT NULL DEFAULT nextval('exercise_completions_id_seq'::regclass),
  completion_id integer,
  exercise_id integer,
  sets_completed integer,
  reps_completed ARRAY,
  weight_kg ARRAY,
  notes text,
  rpe integer CHECK (rpe >= 1 AND rpe <= 10),
  form_quality text CHECK (form_quality = ANY (ARRAY['perfect'::text, 'good'::text, 'okay'::text, 'poor'::text])),
  CONSTRAINT exercise_completions_pkey PRIMARY KEY (id),
  CONSTRAINT exercise_completions_completion_id_fkey FOREIGN KEY (completion_id) REFERENCES public.workout_completions(id)
);
CREATE TABLE public.exercise_notes (
  id integer NOT NULL DEFAULT nextval('exercise_notes_id_seq'::regclass),
  user_id uuid,
  exercise_id integer,
  note text NOT NULL,
  tags ARRAY,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT exercise_notes_pkey PRIMARY KEY (id),
  CONSTRAINT exercise_notes_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.exercises (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  category_id uuid,
  equipment_id uuid,
  equipment_variant text,
  primary_muscle_id uuid,
  secondary_muscles ARRAY,
  movement_type text CHECK (movement_type = ANY (ARRAY['compound'::text, 'isolation'::text, 'cardio'::text, 'flexibility'::text, 'plyometric'::text, 'isometric'::text])),
  force_type text CHECK (force_type = ANY (ARRAY['push'::text, 'pull'::text, 'static'::text, 'dynamic'::text, 'rotation'::text])),
  mechanics_type text CHECK (mechanics_type = ANY (ARRAY['bilateral'::text, 'unilateral'::text, 'alternating'::text])),
  body_position text CHECK (body_position = ANY (ARRAY['standing'::text, 'seated'::text, 'lying_flat'::text, 'lying_incline'::text, 'lying_decline'::text, 'kneeling'::text, 'hanging'::text, 'leaning'::text])),
  grip_type text CHECK (grip_type = ANY (ARRAY['overhand'::text, 'underhand'::text, 'neutral'::text, 'mixed'::text, 'wide'::text, 'narrow'::text, 'standard'::text, 'hammer'::text, 'false'::text, NULL::text])),
  incline_angle integer CHECK (incline_angle >= '-45'::integer AND incline_angle <= 90),
  instructions ARRAY,
  tips ARRAY,
  common_mistakes ARRAY,
  video_url text,
  image_urls ARRAY,
  difficulty_level integer CHECK (difficulty_level >= 1 AND difficulty_level <= 5),
  is_bodyweight boolean DEFAULT false,
  requires_spotter boolean DEFAULT false,
  is_unilateral boolean DEFAULT false,
  created_by uuid,
  is_public boolean DEFAULT true,
  is_verified boolean DEFAULT false,
  popularity_score integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT exercises_pkey PRIMARY KEY (id),
  CONSTRAINT exercises_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.exercise_categories(id),
  CONSTRAINT exercises_equipment_id_fkey FOREIGN KEY (equipment_id) REFERENCES public.equipment_types(id),
  CONSTRAINT exercises_primary_muscle_id_fkey FOREIGN KEY (primary_muscle_id) REFERENCES public.muscle_groups(id),
  CONSTRAINT exercises_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.favorite_workouts (
  id integer NOT NULL DEFAULT nextval('favorite_workouts_id_seq'::regclass),
  user_id uuid,
  workout_id integer,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT favorite_workouts_pkey PRIMARY KEY (id),
  CONSTRAINT favorite_workouts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT favorite_workouts_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.fitness_goals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  goal_type text NOT NULL CHECK (goal_type = ANY (ARRAY['distance'::text, 'duration'::text, 'frequency'::text, 'calories'::text, 'weight'::text, 'pace'::text, 'strength'::text])),
  activity_type text,
  target_value real NOT NULL,
  target_unit text NOT NULL,
  timeframe text CHECK (timeframe = ANY (ARRAY['daily'::text, 'weekly'::text, 'monthly'::text, 'yearly'::text, 'custom'::text])),
  start_date date NOT NULL,
  end_date date,
  current_value real DEFAULT 0,
  last_updated timestamp with time zone,
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'completed'::text, 'paused'::text, 'abandoned'::text])),
  completed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT fitness_goals_pkey PRIMARY KEY (id),
  CONSTRAINT fitness_goals_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL CHECK (char_length(name) >= 1 AND char_length(name) <= 200),
  brand text CHECK (brand IS NULL OR char_length(brand) <= 100),
  barcode text UNIQUE CHECK (barcode IS NULL OR char_length(barcode) <= 50),
  description text CHECK (description IS NULL OR char_length(description) <= 500),
  serving_size numeric NOT NULL DEFAULT 100 CHECK (serving_size > 0::numeric),
  serving_unit USER-DEFINED NOT NULL DEFAULT 'g'::food_unit,
  serving_description text,
  calories numeric CHECK (calories IS NULL OR calories >= 0::numeric),
  protein_g numeric CHECK (protein_g IS NULL OR protein_g >= 0::numeric),
  carbs_g numeric CHECK (carbs_g IS NULL OR carbs_g >= 0::numeric),
  fat_g numeric CHECK (fat_g IS NULL OR fat_g >= 0::numeric),
  fiber_g numeric CHECK (fiber_g IS NULL OR fiber_g >= 0::numeric),
  sugar_g numeric CHECK (sugar_g IS NULL OR sugar_g >= 0::numeric),
  sodium_mg numeric CHECK (sodium_mg IS NULL OR sodium_mg >= 0::numeric),
  created_by uuid,
  is_verified boolean DEFAULT false,
  is_public boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT foods_pkey PRIMARY KEY (id),
  CONSTRAINT foods_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.garmin_connections (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE,
  garmin_user_id text,
  is_active boolean DEFAULT true,
  last_sync timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  garmin_email text,
  encrypted_password text,
  sync_error text,
  CONSTRAINT garmin_connections_pkey PRIMARY KEY (id),
  CONSTRAINT garmin_connections_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.goal_embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  goal_id uuid NOT NULL,
  user_id uuid NOT NULL,
  content_hash text NOT NULL,
  embedding USER-DEFINED NOT NULL,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT goal_embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT goal_embeddings_goal_id_fkey FOREIGN KEY (goal_id) REFERENCES public.user_goals(id),
  CONSTRAINT goal_embeddings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.meal_log_foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  meal_log_id uuid NOT NULL,
  food_id uuid NOT NULL,
  quantity numeric NOT NULL CHECK (quantity > 0::numeric),
  unit USER-DEFINED NOT NULL,
  calories_consumed numeric,
  protein_consumed numeric,
  carbs_consumed numeric,
  fat_consumed numeric,
  fiber_consumed numeric,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT meal_log_foods_pkey PRIMARY KEY (id),
  CONSTRAINT meal_log_foods_meal_log_id_fkey FOREIGN KEY (meal_log_id) REFERENCES public.meal_logs(id),
  CONSTRAINT meal_log_foods_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.meal_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name text CHECK (name IS NULL OR char_length(name) <= 200),
  category USER-DEFINED NOT NULL DEFAULT 'other'::meal_category,
  logged_at timestamp with time zone NOT NULL DEFAULT now(),
  notes text CHECK (notes IS NULL OR char_length(notes) <= 500),
  total_calories numeric DEFAULT 0,
  total_protein_g numeric DEFAULT 0,
  total_carbs_g numeric DEFAULT 0,
  total_fat_g numeric DEFAULT 0,
  total_fiber_g numeric DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT meal_logs_pkey PRIMARY KEY (id),
  CONSTRAINT meal_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.meal_template_foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  meal_template_id uuid NOT NULL,
  food_id uuid NOT NULL,
  quantity numeric NOT NULL CHECK (quantity > 0::numeric),
  unit USER-DEFINED NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT meal_template_foods_pkey PRIMARY KEY (id),
  CONSTRAINT meal_template_foods_meal_template_id_fkey FOREIGN KEY (meal_template_id) REFERENCES public.meal_templates(id),
  CONSTRAINT meal_template_foods_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.meal_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name text NOT NULL CHECK (char_length(name) >= 1 AND char_length(name) <= 200),
  category USER-DEFINED NOT NULL DEFAULT 'other'::meal_category,
  description text CHECK (description IS NULL OR char_length(description) <= 500),
  total_calories numeric DEFAULT 0,
  total_protein_g numeric DEFAULT 0,
  total_carbs_g numeric DEFAULT 0,
  total_fat_g numeric DEFAULT 0,
  total_fiber_g numeric DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT meal_templates_pkey PRIMARY KEY (id),
  CONSTRAINT meal_templates_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.muscle_groups (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  category text NOT NULL CHECK (category = ANY (ARRAY['upper'::text, 'lower'::text, 'core'::text, 'full_body'::text])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT muscle_groups_pkey PRIMARY KEY (id)
);
CREATE TABLE public.personal_records (
  id integer NOT NULL DEFAULT nextval('personal_records_id_seq'::regclass),
  user_id uuid,
  exercise_id integer,
  record_type text NOT NULL CHECK (record_type = ANY (ARRAY['max_weight'::text, 'max_reps'::text, 'max_volume'::text, '1rm'::text])),
  value numeric NOT NULL,
  achieved_date date NOT NULL DEFAULT CURRENT_DATE,
  workout_completion_id integer,
  previous_record numeric,
  improvement_percentage numeric,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT personal_records_pkey PRIMARY KEY (id),
  CONSTRAINT personal_records_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT personal_records_workout_completion_id_fkey FOREIGN KEY (workout_completion_id) REFERENCES public.workout_completions(id)
);
CREATE TABLE public.profile_embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  content_hash text NOT NULL,
  embedding USER-DEFINED NOT NULL,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT profile_embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT profile_embeddings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  full_name text,
  goal text CHECK (goal = ANY (ARRAY['build_muscle'::text, 'lose_weight'::text, 'gain_strength'::text])),
  onboarding_completed boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  goals_embedding USER-DEFINED,
  about_me text,
  experience_level USER-DEFINED DEFAULT 'beginner'::experience_level,
  fitness_goals ARRAY,
  preferred_activities ARRAY,
  motivation_factors ARRAY,
  physical_limitations ARRAY,
  available_equipment ARRAY,
  training_frequency text,
  session_duration text,
  dietary_preferences ARRAY,
  notification_preferences jsonb DEFAULT '{}'::jsonb,
  privacy_settings jsonb DEFAULT '{}'::jsonb,
  age integer CHECK (age >= 13 AND age <= 120),
  location text,
  weekly_hours numeric CHECK (weekly_hours >= 0::numeric AND weekly_hours <= 40::numeric),
  primary_goal text,
  focus_areas ARRAY,
  health_conditions text,
  equipment_access text,
  preferred_workout_time text,
  strengths text,
  areas_for_improvement text,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.rate_limits (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  endpoint text NOT NULL,
  requests integer DEFAULT 0,
  window_seconds integer DEFAULT 86400,
  reset_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT rate_limits_pkey PRIMARY KEY (id),
  CONSTRAINT rate_limits_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.rest_timer_preferences (
  user_id uuid NOT NULL,
  default_rest_seconds integer DEFAULT 90,
  auto_start_timer boolean DEFAULT true,
  sound_enabled boolean DEFAULT true,
  vibration_enabled boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT rest_timer_preferences_pkey PRIMARY KEY (user_id),
  CONSTRAINT rest_timer_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.set_performances (
  id integer NOT NULL DEFAULT nextval('set_performances_id_seq'::regclass),
  user_id uuid,
  session_id integer,
  exercise_id integer,
  set_number integer NOT NULL,
  target_reps integer,
  actual_reps integer,
  weight_kg numeric,
  rpe integer CHECK (rpe >= 1 AND rpe <= 10),
  rest_taken_seconds integer,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT set_performances_pkey PRIMARY KEY (id),
  CONSTRAINT set_performances_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT set_performances_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.active_workout_sessions(id)
);
CREATE TABLE public.strava_connections (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE,
  strava_athlete_id bigint NOT NULL,
  access_token text NOT NULL,
  refresh_token text NOT NULL,
  expires_at timestamp with time zone NOT NULL,
  athlete_data jsonb,
  scope text,
  connected_at timestamp with time zone DEFAULT now(),
  last_sync_at timestamp with time zone,
  sync_enabled boolean DEFAULT true,
  CONSTRAINT strava_connections_pkey PRIMARY KEY (id),
  CONSTRAINT strava_connections_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.user_context_embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  content_type text NOT NULL CHECK (content_type = ANY (ARRAY['workout'::text, 'goal'::text, 'conversation'::text, 'progress'::text, 'exercise'::text, 'achievement'::text])),
  content text NOT NULL,
  metadata jsonb DEFAULT '{}'::jsonb,
  embedding USER-DEFINED NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_context_embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT user_context_embeddings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_context_summaries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  period_type text NOT NULL CHECK (period_type = ANY (ARRAY['weekly'::text, 'monthly'::text, 'quarterly'::text, 'yearly'::text])),
  period_start date NOT NULL,
  period_end date NOT NULL,
  activity_summary jsonb DEFAULT '{}'::jsonb,
  nutrition_summary jsonb DEFAULT '{}'::jsonb,
  key_achievements ARRAY DEFAULT ARRAY[]::text[],
  challenges_faced ARRAY DEFAULT ARRAY[]::text[],
  body_composition_change jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_context_summaries_pkey PRIMARY KEY (id),
  CONSTRAINT user_context_summaries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_custom_workouts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  exercises jsonb,
  duration_minutes integer,
  difficulty text CHECK (difficulty = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text])),
  tags ARRAY,
  is_public boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_custom_workouts_pkey PRIMARY KEY (id),
  CONSTRAINT user_custom_workouts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_exercises (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  user_id uuid NOT NULL,
  name text NOT NULL,
  category text,
  muscle_group text,
  equipment text,
  instructions ARRAY,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_exercises_pkey PRIMARY KEY (id),
  CONSTRAINT user_exercises_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.user_food_frequency (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  food_id uuid NOT NULL,
  log_count integer DEFAULT 1,
  last_quantity numeric,
  last_unit USER-DEFINED,
  last_logged_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  total_quantity_logged numeric DEFAULT 0,
  favorite boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_food_frequency_pkey PRIMARY KEY (id),
  CONSTRAINT user_food_frequency_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_food_frequency_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.user_goals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  goal_type USER-DEFINED NOT NULL,
  goal_description text NOT NULL,
  target_value numeric,
  target_unit text,
  target_date date,
  priority integer DEFAULT 1 CHECK (priority >= 1 AND priority <= 5),
  status USER-DEFINED DEFAULT 'active'::goal_status,
  is_active boolean DEFAULT true,
  progress_value numeric DEFAULT 0,
  progress_notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT user_goals_pkey PRIMARY KEY (id),
  CONSTRAINT user_goals_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_meal_patterns (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  meal_category USER-DEFINED,
  typical_time time without time zone,
  food_id uuid,
  frequency integer DEFAULT 1,
  day_of_week integer,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_meal_patterns_pkey PRIMARY KEY (id),
  CONSTRAINT user_meal_patterns_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_meal_patterns_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.user_memory_facts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  fact_type character varying NOT NULL CHECK (fact_type::text = ANY (ARRAY['preference'::character varying, 'goal'::character varying, 'constraint'::character varying, 'achievement'::character varying, 'routine'::character varying]::text[])),
  content text NOT NULL,
  confidence double precision DEFAULT 0.8 CHECK (confidence >= 0::double precision AND confidence <= 1::double precision),
  source character varying DEFAULT 'conversation'::character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  is_active boolean DEFAULT true,
  CONSTRAINT user_memory_facts_pkey PRIMARY KEY (id),
  CONSTRAINT user_memory_facts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_milestones (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  milestone_type text NOT NULL CHECK (milestone_type = ANY (ARRAY['achievement'::text, 'injury'::text, 'goal_completed'::text, 'pr'::text, 'life_event'::text, 'setback'::text])),
  title text NOT NULL,
  description text,
  occurred_at date NOT NULL,
  impact_level text CHECK (impact_level = ANY (ARRAY['high'::text, 'medium'::text, 'low'::text])),
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_milestones_pkey PRIMARY KEY (id),
  CONSTRAINT user_milestones_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_nutrition_preferences (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  preferred_units USER-DEFINED DEFAULT 'g'::food_unit,
  default_meal_category USER-DEFINED DEFAULT 'other'::meal_category,
  track_water boolean DEFAULT true,
  track_micronutrients boolean DEFAULT false,
  dietary_restrictions ARRAY,
  allergens ARRAY,
  daily_calorie_goal numeric,
  daily_protein_goal numeric,
  daily_carbs_goal numeric,
  daily_fat_goal numeric,
  daily_fiber_goal numeric,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_nutrition_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT user_nutrition_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_preference_profiles (
  user_id uuid NOT NULL,
  workout_preferences jsonb DEFAULT '{}'::jsonb,
  nutrition_preferences jsonb DEFAULT '{}'::jsonb,
  communication_style jsonb DEFAULT '{}'::jsonb,
  constraints jsonb DEFAULT '{}'::jsonb,
  motivators ARRAY,
  coaching_notes text,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_preference_profiles_pkey PRIMARY KEY (user_id),
  CONSTRAINT user_preference_profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_preferences (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  unit_system text DEFAULT 'metric'::text CHECK (unit_system = ANY (ARRAY['metric'::text, 'imperial'::text])),
  default_activity_view text DEFAULT 'list'::text CHECK (default_activity_view = ANY (ARRAY['list'::text, 'grid'::text, 'calendar'::text])),
  activities_per_page integer DEFAULT 20 CHECK (activities_per_page >= 10 AND activities_per_page <= 100),
  activities_public boolean DEFAULT false,
  share_stats boolean DEFAULT false,
  workout_reminders boolean DEFAULT true,
  achievement_notifications boolean DEFAULT true,
  weekly_summary boolean DEFAULT true,
  auto_pause boolean DEFAULT true,
  countdown_seconds integer DEFAULT 3,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT user_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_quick_foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  food_id uuid NOT NULL,
  display_order integer DEFAULT 0,
  category text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_quick_foods_pkey PRIMARY KEY (id),
  CONSTRAINT user_quick_foods_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_quick_foods_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.user_settings (
  user_id uuid NOT NULL,
  preferred_workout_days ARRAY DEFAULT ARRAY['monday'::text, 'wednesday'::text, 'friday'::text],
  preferred_workout_time time without time zone,
  notifications_enabled boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  auto_sync_activities boolean DEFAULT true,
  preferred_units text DEFAULT 'metric'::text CHECK (preferred_units = ANY (ARRAY['metric'::text, 'imperial'::text])),
  default_activity_privacy text DEFAULT 'private'::text CHECK (default_activity_privacy = ANY (ARRAY['private'::text, 'friends'::text, 'public'::text])),
  watch_type text CHECK (watch_type = ANY (ARRAY['apple_watch'::text, 'garmin'::text, 'fitbit'::text, 'polar'::text, 'suunto'::text, 'wahoo'::text, 'other'::text])),
  CONSTRAINT user_settings_pkey PRIMARY KEY (user_id),
  CONSTRAINT user_settings_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.user_workouts (
  id integer NOT NULL DEFAULT nextval('user_workouts_id_seq'::regclass),
  user_id uuid,
  workout_id integer,
  scheduled_date date NOT NULL,
  completed boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  status text DEFAULT 'scheduled'::text CHECK (status = ANY (ARRAY['scheduled'::text, 'active'::text, 'paused'::text, 'completed'::text, 'cancelled'::text])),
  started_at timestamp with time zone,
  paused_at timestamp with time zone,
  paused_duration_seconds integer DEFAULT 0,
  current_exercise_index integer DEFAULT 0,
  current_set_index integer DEFAULT 0,
  CONSTRAINT user_workouts_pkey PRIMARY KEY (id),
  CONSTRAINT user_workouts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT user_workouts_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.webhook_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  source text NOT NULL,
  event_type text NOT NULL,
  object_type text,
  object_id text,
  athlete_id bigint,
  payload jsonb,
  processed boolean DEFAULT false,
  processed_at timestamp with time zone,
  error text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT webhook_events_pkey PRIMARY KEY (id)
);
CREATE TABLE public.workout_completions (
  id integer NOT NULL DEFAULT nextval('workout_completions_id_seq'::regclass),
  user_id uuid,
  user_workout_id integer,
  workout_id integer,
  started_at timestamp with time zone,
  completed_at timestamp with time zone DEFAULT now(),
  notes text,
  rpe integer CHECK (rpe >= 1 AND rpe <= 10),
  mood text CHECK (mood = ANY (ARRAY['great'::text, 'good'::text, 'okay'::text, 'tired'::text, 'exhausted'::text])),
  energy_level integer CHECK (energy_level >= 1 AND energy_level <= 5),
  workout_rating integer CHECK (workout_rating >= 1 AND workout_rating <= 5),
  difficulty_rating integer CHECK (difficulty_rating >= 1 AND difficulty_rating <= 10),
  would_repeat boolean DEFAULT true,
  total_pause_duration_seconds integer DEFAULT 0,
  duration_minutes integer,
  embedding USER-DEFINED,
  CONSTRAINT workout_completions_pkey PRIMARY KEY (id),
  CONSTRAINT workout_completions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT workout_completions_user_workout_id_fkey FOREIGN KEY (user_workout_id) REFERENCES public.user_workouts(id),
  CONSTRAINT workout_completions_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.workout_tags (
  id integer NOT NULL DEFAULT nextval('workout_tags_id_seq'::regclass),
  name text NOT NULL UNIQUE,
  category text CHECK (category = ANY (ARRAY['equipment'::text, 'muscle_group'::text, 'difficulty'::text, 'goal'::text, 'duration'::text])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_tags_pkey PRIMARY KEY (id)
);
CREATE TABLE public.workout_templates (
  id integer NOT NULL DEFAULT nextval('workout_templates_id_seq'::regclass),
  user_id uuid,
  name text NOT NULL,
  description text,
  based_on_workout_id integer,
  is_public boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_templates_pkey PRIMARY KEY (id),
  CONSTRAINT workout_templates_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT workout_templates_based_on_workout_id_fkey FOREIGN KEY (based_on_workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.workout_workout_tags (
  workout_id integer NOT NULL,
  tag_id integer NOT NULL,
  CONSTRAINT workout_workout_tags_pkey PRIMARY KEY (tag_id, workout_id),
  CONSTRAINT workout_workout_tags_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id),
  CONSTRAINT workout_workout_tags_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES public.workout_tags(id)
);
CREATE TABLE public.workouts (
  id integer NOT NULL DEFAULT nextval('workouts_id_seq'::regclass),
  name text NOT NULL,
  type text NOT NULL CHECK (type = ANY (ARRAY['push'::text, 'pull'::text, 'legs'::text, 'upper'::text, 'lower'::text, 'full_body'::text, 'arms'::text, 'shoulders'::text, 'chest'::text, 'back'::text, 'core'::text, 'cardio'::text])),
  goal text CHECK (goal = ANY (ARRAY['build_muscle'::text, 'lose_weight'::text, 'gain_strength'::text, 'all'::text])),
  duration_minutes integer,
  difficulty text CHECK (difficulty = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text])),
  created_at timestamp with time zone DEFAULT now(),
  estimated_duration_minutes integer DEFAULT 45,
  description text,
  popularity_score integer DEFAULT 0,
  user_id uuid,
  is_public boolean NOT NULL DEFAULT false,
  CONSTRAINT workouts_pkey PRIMARY KEY (id),
  CONSTRAINT workouts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);