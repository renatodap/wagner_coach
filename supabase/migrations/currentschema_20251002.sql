-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.active_workout_sessions (
  id integer NOT NULL DEFAULT nextval('active_workout_sessions_id_seq'::regclass),
  user_id uuid,
  user_workout_id integer,
  workout_id integer,
  status text NOT NULL CHECK (status = ANY (ARRAY['active'::text, 'paused'::text, 'completed'::text])),
  started_at timestamp with time zone DEFAULT now(),
  paused_at timestamp with time zone,
  resumed_at timestamp with time zone,
  total_pause_duration_seconds integer DEFAULT 0,
  current_exercise_index integer DEFAULT 0,
  current_set_index integer DEFAULT 0,
  exercise_completions jsonb DEFAULT '[]'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT active_workout_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT active_workout_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT active_workout_sessions_user_workout_id_fkey FOREIGN KEY (user_workout_id) REFERENCES public.user_workouts(id),
  CONSTRAINT active_workout_sessions_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.activities (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  source text NOT NULL CHECK (source = ANY (ARRAY['strava'::text, 'garmin'::text, 'manual'::text, 'apple'::text, 'fitbit'::text, 'polar'::text, 'suunto'::text, 'wahoo'::text])),
  external_id text,
  name text NOT NULL,
  activity_type text NOT NULL,
  sport_type text,
  start_date timestamp with time zone NOT NULL,
  end_date timestamp with time zone,
  timezone text,
  utc_offset integer,
  elapsed_time_seconds integer NOT NULL,
  moving_time_seconds integer,
  distance_meters numeric,
  average_speed numeric,
  max_speed numeric,
  total_elevation_gain numeric,
  total_elevation_loss numeric,
  elevation_high numeric,
  elevation_low numeric,
  average_heartrate integer,
  max_heartrate integer,
  min_heartrate integer,
  heartrate_zones jsonb,
  average_power numeric,
  max_power integer,
  normalized_power numeric,
  intensity_factor numeric,
  tss numeric,
  power_zones jsonb,
  kilojoules numeric,
  average_cadence numeric,
  max_cadence integer,
  average_stride_length numeric,
  average_vertical_oscillation numeric,
  average_ground_contact_time integer,
  average_ground_contact_balance numeric,
  average_vertical_ratio numeric,
  pool_length numeric,
  total_strokes integer,
  average_stroke_rate numeric,
  average_swolf numeric,
  lap_count integer,
  total_reps integer,
  total_sets integer,
  total_weight_lifted_kg numeric,
  exercise_count integer,
  muscle_groups ARRAY,
  total_shots integer,
  forehand_count integer,
  backhand_count integer,
  serve_count integer,
  volley_count integer,
  winner_count integer,
  unforced_error_count integer,
  ace_count integer,
  double_fault_count integer,
  first_serve_percentage numeric,
  points_won_percentage numeric,
  match_duration_minutes integer,
  sets_played integer,
  games_played integer,
  average_distance_per_stroke numeric,
  average_split_time integer,
  poses_held integer,
  average_hold_duration integer,
  flexibility_score integer,
  calories integer,
  active_calories integer,
  training_load numeric,
  aerobic_training_effect numeric,
  anaerobic_training_effect numeric,
  recovery_time_hours integer,
  vo2max_estimate numeric,
  fitness_level integer,
  perceived_exertion integer CHECK (perceived_exertion >= 1 AND perceived_exertion <= 10),
  mood text CHECK (mood = ANY (ARRAY['terrible'::text, 'bad'::text, 'okay'::text, 'good'::text, 'amazing'::text])),
  energy_level integer CHECK (energy_level >= 1 AND energy_level <= 5),
  soreness_level integer CHECK (soreness_level >= 0 AND soreness_level <= 10),
  stress_level integer CHECK (stress_level >= 0 AND stress_level <= 10),
  sleep_quality integer CHECK (sleep_quality >= 1 AND sleep_quality <= 10),
  workout_rating integer CHECK (workout_rating >= 1 AND workout_rating <= 5),
  weather_conditions text,
  temperature_celsius numeric,
  humidity_percentage integer,
  wind_speed_kmh numeric,
  wind_direction integer,
  precipitation text,
  air_quality_index integer,
  indoor boolean DEFAULT false,
  gear_id text,
  location text,
  route_name text,
  city text,
  state text,
  country text,
  start_lat numeric,
  start_lng numeric,
  end_lat numeric,
  end_lng numeric,
  workout_id integer,
  notes text,
  private_notes text,
  photos ARRAY,
  videos ARRAY,
  map_polyline text,
  kudos_count integer DEFAULT 0,
  comment_count integer DEFAULT 0,
  photo_count integer DEFAULT 0,
  visibility text DEFAULT 'private'::text CHECK (visibility = ANY (ARRAY['private'::text, 'followers'::text, 'public'::text])),
  commute boolean DEFAULT false,
  trainer boolean DEFAULT false,
  race boolean DEFAULT false,
  workout_type text,
  weather_data jsonb,
  raw_data jsonb,
  laps jsonb,
  splits jsonb,
  segments jsonb,
  device_name text,
  device_manufacturer text,
  upload_source text,
  file_format text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  synced_at timestamp with time zone,
  CONSTRAINT activities_pkey PRIMARY KEY (id),
  CONSTRAINT activities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT activities_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.activity_segments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  activity_id uuid,
  segment_type text NOT NULL CHECK (segment_type = ANY (ARRAY['lap'::text, 'interval'::text, 'set'::text, 'split'::text, 'circuit'::text, 'round'::text])),
  segment_index integer NOT NULL,
  start_time timestamp with time zone,
  elapsed_time_seconds integer,
  moving_time_seconds integer,
  distance_meters numeric,
  average_speed numeric,
  max_speed numeric,
  average_pace text,
  average_heartrate integer,
  max_heartrate integer,
  min_heartrate integer,
  exercise_name text,
  reps integer,
  weight_kg numeric,
  average_cadence numeric,
  average_power numeric,
  normalized_power numeric,
  calories integer,
  elevation_gain numeric,
  elevation_loss numeric,
  average_stroke_rate numeric,
  stroke_count integer,
  notes text,
  raw_data jsonb,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT activity_segments_pkey PRIMARY KEY (id),
  CONSTRAINT activity_segments_activity_id_fkey FOREIGN KEY (activity_id) REFERENCES public.activities(id)
);
CREATE TABLE public.activity_streams (
  activity_id uuid NOT NULL,
  stream_type text NOT NULL CHECK (stream_type = ANY (ARRAY['heartrate'::text, 'cadence'::text, 'power'::text, 'speed'::text, 'altitude'::text, 'distance'::text, 'temperature'::text, 'grade'::text, 'battery'::text, 'calories'::text, 'lap_time'::text, 'moving'::text])),
  data_points jsonb NOT NULL,
  data_type text CHECK (data_type = ANY (ARRAY['integer'::text, 'float'::text, 'boolean'::text, 'string'::text])),
  resolution text CHECK (resolution = ANY (ARRAY['high'::text, 'medium'::text, 'low'::text, 'raw'::text])),
  original_size integer,
  series_type text CHECK (series_type = ANY (ARRAY['time'::text, 'distance'::text])),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT activity_streams_pkey PRIMARY KEY (activity_id, stream_type),
  CONSTRAINT activity_streams_activity_id_fkey FOREIGN KEY (activity_id) REFERENCES public.activities(id)
);
CREATE TABLE public.activity_workout_links (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  activity_id uuid NOT NULL,
  custom_workout_id uuid,
  standard_workout_id integer,
  link_type text DEFAULT 'manual'::text CHECK (link_type = ANY (ARRAY['automatic'::text, 'manual'::text, 'suggested'::text])),
  confidence_score numeric,
  match_reason text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT activity_workout_links_pkey PRIMARY KEY (id),
  CONSTRAINT activity_workout_links_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT activity_workout_links_activity_id_fkey FOREIGN KEY (activity_id) REFERENCES public.activities(id),
  CONSTRAINT activity_workout_links_standard_workout_id_fkey FOREIGN KEY (standard_workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.ai_conversations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  messages jsonb NOT NULL DEFAULT '[]'::jsonb,
  embedding USER-DEFINED,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  context_used jsonb DEFAULT '{}'::jsonb,
  last_message_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_conversations_pkey PRIMARY KEY (id),
  CONSTRAINT ai_conversations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.ai_generated_programs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  goals ARRAY,
  duration_weeks integer NOT NULL DEFAULT 12,
  total_days integer NOT NULL DEFAULT 84,
  start_date date,
  end_date date,
  is_active boolean DEFAULT true,
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'completed'::text, 'paused'::text, 'abandoned'::text])),
  generation_prompt text,
  generation_context jsonb DEFAULT '{}'::jsonb,
  questions_answers jsonb DEFAULT '[]'::jsonb,
  ai_model text DEFAULT 'gpt-4o'::text,
  difficulty_level text CHECK (difficulty_level = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text])),
  primary_focus ARRAY,
  equipment_needed ARRAY,
  dietary_approach text,
  current_day integer DEFAULT 1,
  days_completed integer DEFAULT 0,
  meals_completed integer DEFAULT 0,
  workouts_completed integer DEFAULT 0,
  adherence_percentage numeric DEFAULT 100 CHECK (adherence_percentage >= 0::numeric AND adherence_percentage <= 100::numeric),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT ai_generated_programs_pkey PRIMARY KEY (id),
  CONSTRAINT ai_generated_programs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.ai_program_days (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  program_id uuid NOT NULL,
  day_number integer NOT NULL CHECK (day_number >= 1 AND day_number <= 365),
  day_date date,
  day_of_week text CHECK (day_of_week = ANY (ARRAY['monday'::text, 'tuesday'::text, 'wednesday'::text, 'thursday'::text, 'friday'::text, 'saturday'::text, 'sunday'::text])),
  day_name text,
  day_focus text,
  day_notes text,
  is_completed boolean DEFAULT false,
  completed_at timestamp with time zone,
  completion_notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_program_days_pkey PRIMARY KEY (id),
  CONSTRAINT ai_program_days_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.ai_generated_programs(id)
);
CREATE TABLE public.ai_program_meals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  program_day_id uuid NOT NULL,
  program_id uuid NOT NULL,
  meal_type text NOT NULL CHECK (meal_type = ANY (ARRAY['breakfast'::text, 'lunch'::text, 'dinner'::text, 'snack'::text, 'pre_workout'::text, 'post_workout'::text])),
  meal_time time without time zone,
  meal_order integer DEFAULT 0,
  name text NOT NULL,
  description text,
  recipe_instructions text,
  preparation_time_minutes integer,
  foods jsonb DEFAULT '[]'::jsonb,
  total_calories numeric,
  total_protein_g numeric,
  total_carbs_g numeric,
  total_fat_g numeric,
  total_fiber_g numeric,
  meal_tags ARRAY,
  alternatives jsonb DEFAULT '[]'::jsonb,
  notes text,
  is_completed boolean DEFAULT false,
  completed_at timestamp with time zone,
  actual_foods_eaten jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_program_meals_pkey PRIMARY KEY (id),
  CONSTRAINT ai_program_meals_program_day_id_fkey FOREIGN KEY (program_day_id) REFERENCES public.ai_program_days(id),
  CONSTRAINT ai_program_meals_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.ai_generated_programs(id)
);
CREATE TABLE public.ai_program_workouts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  program_day_id uuid NOT NULL,
  program_id uuid NOT NULL,
  workout_type text NOT NULL CHECK (workout_type = ANY (ARRAY['strength'::text, 'cardio'::text, 'sports'::text, 'flexibility'::text, 'mobility'::text, 'rest'::text, 'active_recovery'::text])),
  workout_subtype text,
  workout_order integer DEFAULT 0,
  name text NOT NULL,
  description text,
  duration_minutes integer,
  exercises jsonb DEFAULT '[]'::jsonb,
  workout_details jsonb DEFAULT '{}'::jsonb,
  intensity text CHECK (intensity = ANY (ARRAY['low'::text, 'moderate'::text, 'high'::text, 'max'::text])),
  target_rpe integer CHECK (target_rpe >= 1 AND target_rpe <= 10),
  estimated_calories_burned integer,
  equipment_needed ARRAY,
  location text,
  warmup_notes text,
  cooldown_notes text,
  technique_cues ARRAY,
  notes text,
  alternatives jsonb DEFAULT '[]'::jsonb,
  is_completed boolean DEFAULT false,
  completed_at timestamp with time zone,
  actual_duration_minutes integer,
  actual_rpe integer,
  actual_exercises jsonb,
  completion_notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_program_workouts_pkey PRIMARY KEY (id),
  CONSTRAINT ai_program_workouts_program_day_id_fkey FOREIGN KEY (program_day_id) REFERENCES public.ai_program_days(id),
  CONSTRAINT ai_program_workouts_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.ai_generated_programs(id)
);
CREATE TABLE public.api_sync_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  source_id uuid NOT NULL,
  sync_type text CHECK (sync_type = ANY (ARRAY['full'::text, 'incremental'::text, 'specific_items'::text])),
  started_at timestamp with time zone NOT NULL,
  completed_at timestamp with time zone,
  status text CHECK (status = ANY (ARRAY['running'::text, 'completed'::text, 'failed'::text, 'partial'::text])),
  records_processed integer DEFAULT 0,
  records_created integer DEFAULT 0,
  records_updated integer DEFAULT 0,
  records_failed integer DEFAULT 0,
  error_details jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT api_sync_logs_pkey PRIMARY KEY (id),
  CONSTRAINT api_sync_logs_source_id_fkey FOREIGN KEY (source_id) REFERENCES public.food_sources(id)
);
CREATE TABLE public.barcode_scan_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  barcode text NOT NULL,
  food_id uuid,
  scan_successful boolean,
  location_lat numeric,
  location_lng numeric,
  device_info jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT barcode_scan_history_pkey PRIMARY KEY (id),
  CONSTRAINT barcode_scan_history_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT barcode_scan_history_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods_enhanced(id)
);
CREATE TABLE public.coach_conversations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  coach_persona_id uuid NOT NULL,
  messages jsonb DEFAULT '[]'::jsonb,
  last_message_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT coach_conversations_pkey PRIMARY KEY (id),
  CONSTRAINT coach_conversations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT coach_conversations_coach_persona_id_fkey FOREIGN KEY (coach_persona_id) REFERENCES public.coach_personas(id)
);
CREATE TABLE public.coach_personas (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  display_name text NOT NULL,
  system_prompt text NOT NULL,
  specialty text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT coach_personas_pkey PRIMARY KEY (id)
);
CREATE TABLE public.coach_recommendations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  coach_persona_id uuid NOT NULL,
  recommendation_type text,
  title text NOT NULL,
  description text NOT NULL,
  reasoning text,
  priority integer DEFAULT 3 CHECK (priority >= 1 AND priority <= 5),
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'accepted'::text, 'rejected'::text, 'completed'::text])),
  due_date date,
  created_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT coach_recommendations_pkey PRIMARY KEY (id),
  CONSTRAINT coach_recommendations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT coach_recommendations_coach_persona_id_fkey FOREIGN KEY (coach_persona_id) REFERENCES public.coach_personas(id)
);
CREATE TABLE public.conversation_summaries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  conversation_id uuid,
  summary text NOT NULL,
  key_topics ARRAY,
  extracted_facts ARRAY,
  action_items ARRAY,
  sentiment character varying CHECK (sentiment::text = ANY (ARRAY['positive'::character varying, 'neutral'::character varying, 'frustrated'::character varying, 'motivated'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT conversation_summaries_pkey PRIMARY KEY (id),
  CONSTRAINT conversation_summaries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT conversation_summaries_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.ai_conversations(id)
);
CREATE TABLE public.daily_nutrition_summaries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  date date NOT NULL,
  total_calories numeric,
  total_protein_g numeric,
  total_carbs_g numeric,
  total_fat_g numeric,
  total_fiber_g numeric,
  total_sugar_g numeric,
  total_sodium_mg numeric,
  breakfast_calories numeric,
  lunch_calories numeric,
  dinner_calories numeric,
  snacks_calories numeric,
  calorie_goal numeric,
  protein_goal numeric,
  carbs_goal numeric,
  fat_goal numeric,
  meals_logged integer DEFAULT 0,
  water_ml numeric,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT daily_nutrition_summaries_pkey PRIMARY KEY (id),
  CONSTRAINT daily_nutrition_summaries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.day_exercises (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  day_id uuid NOT NULL,
  exercise_id uuid NOT NULL,
  order_index integer NOT NULL,
  sets integer NOT NULL,
  reps text NOT NULL,
  rest_seconds integer,
  rest_display text,
  notes text,
  technique_cues text,
  modification_easier text,
  modification_harder text,
  target_rpe integer CHECK (target_rpe >= 1 AND target_rpe <= 10),
  target_tempo text,
  equipment_alternatives ARRAY,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT day_exercises_pkey PRIMARY KEY (id),
  CONSTRAINT day_exercises_day_id_fkey FOREIGN KEY (day_id) REFERENCES public.program_days(id),
  CONSTRAINT day_exercises_exercise_id_fkey FOREIGN KEY (exercise_id) REFERENCES public.exercises(id)
);
CREATE TABLE public.embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  content text NOT NULL,
  embedding USER-DEFINED,
  metadata jsonb DEFAULT '{}'::jsonb,
  source_type text NOT NULL,
  source_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT embeddings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.equipment_types (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  category text CHECK (category = ANY (ARRAY['free_weight'::text, 'machine'::text, 'cable'::text, 'bodyweight'::text, 'cardio'::text, 'other'::text])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT equipment_types_pkey PRIMARY KEY (id)
);
CREATE TABLE public.exercise_categories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  description text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT exercise_categories_pkey PRIMARY KEY (id)
);
CREATE TABLE public.exercise_completions (
  id integer NOT NULL DEFAULT nextval('exercise_completions_id_seq'::regclass),
  completion_id integer,
  exercise_id integer,
  sets_completed integer,
  reps_completed ARRAY,
  weight_kg ARRAY,
  notes text,
  rpe integer CHECK (rpe >= 1 AND rpe <= 10),
  form_quality text CHECK (form_quality = ANY (ARRAY['perfect'::text, 'good'::text, 'okay'::text, 'poor'::text])),
  CONSTRAINT exercise_completions_pkey PRIMARY KEY (id),
  CONSTRAINT exercise_completions_completion_id_fkey FOREIGN KEY (completion_id) REFERENCES public.workout_completions(id)
);
CREATE TABLE public.exercise_notes (
  id integer NOT NULL DEFAULT nextval('exercise_notes_id_seq'::regclass),
  user_id uuid,
  exercise_id integer,
  note text NOT NULL,
  tags ARRAY,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT exercise_notes_pkey PRIMARY KEY (id),
  CONSTRAINT exercise_notes_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.exercises (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  category_id uuid,
  equipment_id uuid,
  equipment_variant text,
  primary_muscle_id uuid,
  secondary_muscles ARRAY,
  movement_type text CHECK (movement_type = ANY (ARRAY['compound'::text, 'isolation'::text, 'cardio'::text, 'flexibility'::text, 'plyometric'::text, 'isometric'::text])),
  force_type text CHECK (force_type = ANY (ARRAY['push'::text, 'pull'::text, 'static'::text, 'dynamic'::text, 'rotation'::text])),
  mechanics_type text CHECK (mechanics_type = ANY (ARRAY['bilateral'::text, 'unilateral'::text, 'alternating'::text])),
  body_position text CHECK (body_position = ANY (ARRAY['standing'::text, 'seated'::text, 'lying_flat'::text, 'lying_incline'::text, 'lying_decline'::text, 'kneeling'::text, 'hanging'::text, 'leaning'::text])),
  grip_type text CHECK (grip_type = ANY (ARRAY['overhand'::text, 'underhand'::text, 'neutral'::text, 'mixed'::text, 'wide'::text, 'narrow'::text, 'standard'::text, 'hammer'::text, 'false'::text, NULL::text])),
  incline_angle integer CHECK (incline_angle >= '-45'::integer AND incline_angle <= 90),
  instructions ARRAY,
  tips ARRAY,
  common_mistakes ARRAY,
  video_url text,
  image_urls ARRAY,
  difficulty_level integer CHECK (difficulty_level >= 1 AND difficulty_level <= 5),
  is_bodyweight boolean DEFAULT false,
  requires_spotter boolean DEFAULT false,
  is_unilateral boolean DEFAULT false,
  created_by uuid,
  is_public boolean DEFAULT true,
  is_verified boolean DEFAULT false,
  popularity_score integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT exercises_pkey PRIMARY KEY (id),
  CONSTRAINT exercises_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.exercise_categories(id),
  CONSTRAINT exercises_equipment_id_fkey FOREIGN KEY (equipment_id) REFERENCES public.equipment_types(id),
  CONSTRAINT exercises_primary_muscle_id_fkey FOREIGN KEY (primary_muscle_id) REFERENCES public.muscle_groups(id),
  CONSTRAINT exercises_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.favorite_workouts (
  id integer NOT NULL DEFAULT nextval('favorite_workouts_id_seq'::regclass),
  user_id uuid,
  workout_id integer,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT favorite_workouts_pkey PRIMARY KEY (id),
  CONSTRAINT favorite_workouts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT favorite_workouts_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.fitness_goals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  goal_type text NOT NULL CHECK (goal_type = ANY (ARRAY['distance'::text, 'duration'::text, 'frequency'::text, 'calories'::text, 'weight'::text, 'pace'::text, 'strength'::text])),
  activity_type text,
  target_value real NOT NULL,
  target_unit text NOT NULL,
  timeframe text CHECK (timeframe = ANY (ARRAY['daily'::text, 'weekly'::text, 'monthly'::text, 'yearly'::text, 'custom'::text])),
  start_date date NOT NULL,
  end_date date,
  current_value real DEFAULT 0,
  last_updated timestamp with time zone,
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'completed'::text, 'paused'::text, 'abandoned'::text])),
  completed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT fitness_goals_pkey PRIMARY KEY (id),
  CONSTRAINT fitness_goals_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.food_brands (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  brand_name text NOT NULL UNIQUE,
  parent_company text,
  logo_url text,
  website_url text,
  verified boolean DEFAULT false,
  product_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT food_brands_pkey PRIMARY KEY (id)
);
CREATE TABLE public.food_combinations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  food_ids ARRAY NOT NULL,
  frequency_count integer DEFAULT 1,
  last_used_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT food_combinations_pkey PRIMARY KEY (id)
);
CREATE TABLE public.food_data_reports (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  food_id uuid NOT NULL,
  reporter_id uuid NOT NULL,
  report_type text CHECK (report_type = ANY (ARRAY['incorrect_nutrition'::text, 'wrong_brand'::text, 'duplicate'::text, 'discontinued'::text, 'wrong_barcode'::text, 'other'::text])),
  field_name text,
  current_value text,
  suggested_value text,
  evidence_url text,
  notes text,
  status text DEFAULT 'open'::text CHECK (status = ANY (ARRAY['open'::text, 'investigating'::text, 'resolved'::text, 'rejected'::text])),
  resolved_by uuid,
  resolution_notes text,
  created_at timestamp with time zone DEFAULT now(),
  resolved_at timestamp with time zone,
  CONSTRAINT food_data_reports_pkey PRIMARY KEY (id),
  CONSTRAINT food_data_reports_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods_enhanced(id),
  CONSTRAINT food_data_reports_reporter_id_fkey FOREIGN KEY (reporter_id) REFERENCES auth.users(id),
  CONSTRAINT food_data_reports_resolved_by_fkey FOREIGN KEY (resolved_by) REFERENCES auth.users(id)
);
CREATE TABLE public.food_search_analytics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  search_query text NOT NULL,
  results_count integer,
  selected_food_id uuid,
  search_source text,
  response_time_ms integer,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT food_search_analytics_pkey PRIMARY KEY (id),
  CONSTRAINT food_search_analytics_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT food_search_analytics_selected_food_id_fkey FOREIGN KEY (selected_food_id) REFERENCES public.foods_enhanced(id)
);
CREATE TABLE public.food_serving_sizes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  food_id uuid NOT NULL,
  serving_description text NOT NULL,
  serving_weight_grams numeric NOT NULL,
  serving_quantity numeric DEFAULT 1,
  serving_unit text,
  is_default boolean DEFAULT false,
  display_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT food_serving_sizes_pkey PRIMARY KEY (id),
  CONSTRAINT food_serving_sizes_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods_enhanced(id)
);
CREATE TABLE public.food_sources (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  source_name text NOT NULL UNIQUE CHECK (source_name = ANY (ARRAY['usda'::text, 'fatsecret'::text, 'nutritionix'::text, 'edamam'::text, 'spoonacular'::text, 'user_generated'::text, 'restaurant_api'::text])),
  api_key_encrypted text,
  base_url text,
  rate_limit_per_hour integer,
  last_sync_at timestamp with time zone,
  is_active boolean DEFAULT true,
  priority_rank integer DEFAULT 100,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT food_sources_pkey PRIMARY KEY (id)
);
CREATE TABLE public.food_sync_queue (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  barcode text,
  food_name text,
  source_priority ARRAY,
  requested_by uuid,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text])),
  attempts integer DEFAULT 0,
  last_attempt_at timestamp with time zone,
  result_food_id uuid,
  error_message text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT food_sync_queue_pkey PRIMARY KEY (id),
  CONSTRAINT food_sync_queue_requested_by_fkey FOREIGN KEY (requested_by) REFERENCES auth.users(id),
  CONSTRAINT food_sync_queue_result_food_id_fkey FOREIGN KEY (result_food_id) REFERENCES public.foods_enhanced(id)
);
CREATE TABLE public.foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL CHECK (char_length(name) >= 1 AND char_length(name) <= 200),
  brand text CHECK (brand IS NULL OR char_length(brand) <= 100),
  barcode text UNIQUE CHECK (barcode IS NULL OR char_length(barcode) <= 50),
  description text CHECK (description IS NULL OR char_length(description) <= 500),
  serving_size numeric NOT NULL DEFAULT 100 CHECK (serving_size > 0::numeric),
  serving_unit USER-DEFINED NOT NULL DEFAULT 'g'::food_unit,
  serving_description text,
  calories numeric CHECK (calories IS NULL OR calories >= 0::numeric),
  protein_g numeric CHECK (protein_g IS NULL OR protein_g >= 0::numeric),
  carbs_g numeric CHECK (carbs_g IS NULL OR carbs_g >= 0::numeric),
  fat_g numeric CHECK (fat_g IS NULL OR fat_g >= 0::numeric),
  fiber_g numeric CHECK (fiber_g IS NULL OR fiber_g >= 0::numeric),
  sugar_g numeric CHECK (sugar_g IS NULL OR sugar_g >= 0::numeric),
  sodium_mg numeric CHECK (sodium_mg IS NULL OR sodium_mg >= 0::numeric),
  created_by uuid,
  is_verified boolean DEFAULT false,
  is_public boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT foods_pkey PRIMARY KEY (id),
  CONSTRAINT foods_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.foods_enhanced (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  brand_name text,
  brand_owner text,
  restaurant_name text,
  menu_item_id text,
  product_category text,
  food_group text,
  barcode_upc text UNIQUE,
  barcode_ean text UNIQUE,
  fdc_id text UNIQUE,
  fatsecret_id text,
  nutritionix_id text,
  edamam_id text,
  ndb_number text,
  primary_source_id uuid,
  data_sources jsonb DEFAULT '[]'::jsonb,
  data_quality_score numeric CHECK (data_quality_score >= 0::numeric AND data_quality_score <= 1::numeric),
  is_verified boolean DEFAULT false,
  verification_date timestamp with time zone,
  serving_size numeric NOT NULL DEFAULT 100,
  serving_unit text NOT NULL DEFAULT 'g'::text,
  serving_description text,
  servings_per_container numeric,
  household_serving_size text,
  household_serving_unit text,
  calories numeric,
  total_fat_g numeric,
  saturated_fat_g numeric,
  trans_fat_g numeric,
  polyunsaturated_fat_g numeric,
  monounsaturated_fat_g numeric,
  cholesterol_mg numeric,
  sodium_mg numeric,
  total_carbs_g numeric,
  dietary_fiber_g numeric,
  soluble_fiber_g numeric,
  insoluble_fiber_g numeric,
  total_sugars_g numeric,
  added_sugars_g numeric,
  sugar_alcohols_g numeric,
  protein_g numeric,
  vitamin_a_iu numeric,
  vitamin_a_mcg numeric,
  vitamin_c_mg numeric,
  vitamin_d_mcg numeric,
  vitamin_d_iu numeric,
  vitamin_e_mg numeric,
  vitamin_k_mcg numeric,
  thiamin_mg numeric,
  riboflavin_mg numeric,
  niacin_mg numeric,
  vitamin_b6_mg numeric,
  folate_mcg numeric,
  vitamin_b12_mcg numeric,
  biotin_mcg numeric,
  pantothenic_acid_mg numeric,
  choline_mg numeric,
  calcium_mg numeric,
  iron_mg numeric,
  magnesium_mg numeric,
  phosphorus_mg numeric,
  potassium_mg numeric,
  zinc_mg numeric,
  copper_mg numeric,
  manganese_mg numeric,
  selenium_mcg numeric,
  iodine_mcg numeric,
  caffeine_mg numeric,
  alcohol_g numeric,
  water_g numeric,
  ash_g numeric,
  omega3_fatty_acids_mg numeric,
  omega6_fatty_acids_mg numeric,
  search_vector tsvector,
  popularity_score integer DEFAULT 0,
  search_count integer DEFAULT 0,
  ingredients ARRAY,
  allergens ARRAY,
  dietary_flags ARRAY,
  preparation_methods ARRAY,
  storage_instructions text,
  image_url text,
  image_thumbnail_url text,
  nutrition_label_url text,
  is_discontinued boolean DEFAULT false,
  is_generic boolean DEFAULT false,
  is_raw boolean DEFAULT false,
  is_branded boolean DEFAULT false,
  is_restaurant boolean DEFAULT false,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  last_api_sync timestamp with time zone,
  CONSTRAINT foods_enhanced_pkey PRIMARY KEY (id),
  CONSTRAINT foods_enhanced_primary_source_id_fkey FOREIGN KEY (primary_source_id) REFERENCES public.food_sources(id),
  CONSTRAINT foods_enhanced_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.garmin_connections (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE,
  garmin_user_id text,
  is_active boolean DEFAULT true,
  last_sync timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  garmin_email text,
  encrypted_password text,
  sync_error text,
  CONSTRAINT garmin_connections_pkey PRIMARY KEY (id),
  CONSTRAINT garmin_connections_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.goal_embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  goal_id uuid NOT NULL,
  user_id uuid NOT NULL,
  content_hash text NOT NULL,
  embedding USER-DEFINED NOT NULL,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT goal_embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT goal_embeddings_goal_id_fkey FOREIGN KEY (goal_id) REFERENCES public.user_goals(id),
  CONSTRAINT goal_embeddings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.meal_log_foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  meal_log_id uuid NOT NULL,
  food_id uuid NOT NULL,
  quantity numeric NOT NULL CHECK (quantity > 0::numeric),
  unit USER-DEFINED NOT NULL,
  calories_consumed numeric,
  protein_consumed numeric,
  carbs_consumed numeric,
  fat_consumed numeric,
  fiber_consumed numeric,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT meal_log_foods_pkey PRIMARY KEY (id),
  CONSTRAINT meal_log_foods_meal_log_id_fkey FOREIGN KEY (meal_log_id) REFERENCES public.meal_logs(id),
  CONSTRAINT meal_log_foods_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.meal_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name text CHECK (name IS NULL OR char_length(name) <= 200),
  category USER-DEFINED NOT NULL DEFAULT 'other'::meal_category,
  logged_at timestamp with time zone NOT NULL DEFAULT now(),
  notes text CHECK (notes IS NULL OR char_length(notes) <= 500),
  total_calories numeric DEFAULT 0,
  total_protein_g numeric DEFAULT 0,
  total_carbs_g numeric DEFAULT 0,
  total_fat_g numeric DEFAULT 0,
  total_fiber_g numeric DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT meal_logs_pkey PRIMARY KEY (id),
  CONSTRAINT meal_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.meal_template_foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  meal_template_id uuid NOT NULL,
  food_id uuid NOT NULL,
  quantity numeric NOT NULL CHECK (quantity > 0::numeric),
  unit USER-DEFINED NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT meal_template_foods_pkey PRIMARY KEY (id),
  CONSTRAINT meal_template_foods_meal_template_id_fkey FOREIGN KEY (meal_template_id) REFERENCES public.meal_templates(id),
  CONSTRAINT meal_template_foods_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.meal_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name text NOT NULL CHECK (char_length(name) >= 1 AND char_length(name) <= 200),
  category USER-DEFINED NOT NULL DEFAULT 'other'::meal_category,
  description text CHECK (description IS NULL OR char_length(description) <= 500),
  total_calories numeric DEFAULT 0,
  total_protein_g numeric DEFAULT 0,
  total_carbs_g numeric DEFAULT 0,
  total_fat_g numeric DEFAULT 0,
  total_fiber_g numeric DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT meal_templates_pkey PRIMARY KEY (id),
  CONSTRAINT meal_templates_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.muscle_groups (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  category text NOT NULL CHECK (category = ANY (ARRAY['upper'::text, 'lower'::text, 'core'::text, 'full_body'::text])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT muscle_groups_pkey PRIMARY KEY (id)
);
CREATE TABLE public.personal_records (
  id integer NOT NULL DEFAULT nextval('personal_records_id_seq'::regclass),
  user_id uuid,
  exercise_id integer,
  record_type text NOT NULL CHECK (record_type = ANY (ARRAY['max_weight'::text, 'max_reps'::text, 'max_volume'::text, '1rm'::text])),
  value numeric NOT NULL,
  achieved_date date NOT NULL DEFAULT CURRENT_DATE,
  workout_completion_id integer,
  previous_record numeric,
  improvement_percentage numeric,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT personal_records_pkey PRIMARY KEY (id),
  CONSTRAINT personal_records_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT personal_records_workout_completion_id_fkey FOREIGN KEY (workout_completion_id) REFERENCES public.workout_completions(id)
);
CREATE TABLE public.popular_foods_cache (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  food_id uuid NOT NULL,
  category text CHECK (category = ANY (ARRAY['protein_bars'::text, 'fast_food'::text, 'snacks'::text, 'beverages'::text, 'fruits'::text, 'vegetables'::text, 'dairy'::text, 'grains'::text, 'proteins'::text, 'supplements'::text])),
  popularity_rank integer NOT NULL,
  daily_search_count integer DEFAULT 0,
  weekly_search_count integer DEFAULT 0,
  monthly_search_count integer DEFAULT 0,
  last_searched_at timestamp with time zone,
  cached_data jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT popular_foods_cache_pkey PRIMARY KEY (id),
  CONSTRAINT popular_foods_cache_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods_enhanced(id)
);
CREATE TABLE public.profile_embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  content_hash text NOT NULL,
  embedding USER-DEFINED NOT NULL,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT profile_embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT profile_embeddings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  full_name text,
  goal text CHECK (goal = ANY (ARRAY['build_muscle'::text, 'lose_weight'::text, 'gain_strength'::text])),
  onboarding_completed boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  goals_embedding USER-DEFINED,
  about_me text,
  experience_level USER-DEFINED DEFAULT 'beginner'::experience_level,
  fitness_goals text,
  preferred_activities ARRAY,
  motivation_factors ARRAY,
  physical_limitations ARRAY,
  available_equipment ARRAY,
  training_frequency text,
  session_duration text,
  dietary_preferences text,
  notification_preferences jsonb DEFAULT '{}'::jsonb,
  privacy_settings jsonb DEFAULT '{}'::jsonb,
  age integer CHECK (age >= 13 AND age <= 120),
  location text,
  weekly_hours numeric CHECK (weekly_hours >= 0::numeric AND weekly_hours <= 40::numeric),
  primary_goal text,
  focus_areas ARRAY,
  health_conditions text,
  equipment_access text,
  preferred_workout_time text,
  strengths text,
  areas_for_improvement text,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.program_day_completions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  enrollment_id uuid NOT NULL,
  day_id uuid NOT NULL,
  completed_at timestamp with time zone DEFAULT now(),
  duration_minutes integer,
  exercises_completed integer DEFAULT 0,
  total_exercises integer,
  completion_percentage numeric,
  difficulty_rating integer CHECK (difficulty_rating >= 1 AND difficulty_rating <= 10),
  enjoyment_rating integer CHECK (enjoyment_rating >= 1 AND enjoyment_rating <= 5),
  energy_level integer CHECK (energy_level >= 1 AND energy_level <= 5),
  notes text,
  modifications_used text,
  session_id integer,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT program_day_completions_pkey PRIMARY KEY (id),
  CONSTRAINT program_day_completions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT program_day_completions_enrollment_id_fkey FOREIGN KEY (enrollment_id) REFERENCES public.user_program_enrollments(id),
  CONSTRAINT program_day_completions_day_id_fkey FOREIGN KEY (day_id) REFERENCES public.program_days(id),
  CONSTRAINT program_day_completions_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.active_workout_sessions(id)
);
CREATE TABLE public.program_days (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  program_id uuid NOT NULL,
  day_number integer NOT NULL,
  day_name text NOT NULL,
  original_day_name text,
  day_focus text,
  estimated_duration_minutes integer DEFAULT 60,
  total_exercises integer DEFAULT 0,
  is_rest_day boolean DEFAULT false,
  warm_up_notes text,
  cool_down_notes text,
  day_notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT program_days_pkey PRIMARY KEY (id),
  CONSTRAINT program_days_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.workout_programs(id)
);
CREATE TABLE public.program_generation_requests (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  specific_performance_goal text,
  event_date date,
  weak_points ARRAY,
  recovery_capacity text CHECK (recovery_capacity = ANY (ARRAY['excellent'::text, 'good'::text, 'fair'::text, 'poor'::text])),
  preferred_workout_duration text CHECK (preferred_workout_duration = ANY (ARRAY['30-45min'::text, '45-60min'::text, '60-90min'::text, '90+min'::text])),
  additional_context text,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'generating'::text, 'completed'::text, 'failed'::text])),
  generated_program_id uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT program_generation_requests_pkey PRIMARY KEY (id),
  CONSTRAINT program_generation_requests_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT program_generation_requests_generated_program_id_fkey FOREIGN KEY (generated_program_id) REFERENCES public.user_program_enrollments(id)
);
CREATE TABLE public.program_generation_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  status text DEFAULT 'in_progress'::text CHECK (status = ANY (ARRAY['in_progress'::text, 'completed'::text, 'abandoned'::text])),
  current_step integer DEFAULT 1,
  total_steps integer DEFAULT 3,
  user_profile_snapshot jsonb,
  questions jsonb DEFAULT '[]'::jsonb,
  answers jsonb DEFAULT '[]'::jsonb,
  generated_program_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT program_generation_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT program_generation_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT program_generation_sessions_generated_program_id_fkey FOREIGN KEY (generated_program_id) REFERENCES public.ai_generated_programs(id)
);
CREATE TABLE public.rate_limits (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  endpoint text NOT NULL,
  requests integer DEFAULT 0,
  window_seconds integer DEFAULT 86400,
  reset_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT rate_limits_pkey PRIMARY KEY (id),
  CONSTRAINT rate_limits_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.recipe_ingredients (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  recipe_id uuid NOT NULL,
  food_id uuid NOT NULL,
  quantity numeric NOT NULL,
  unit text NOT NULL,
  preparation_method text,
  is_optional boolean DEFAULT false,
  ingredient_order integer,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT recipe_ingredients_pkey PRIMARY KEY (id),
  CONSTRAINT recipe_ingredients_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods_enhanced(id)
);
CREATE TABLE public.recipes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  prep_time_minutes integer,
  cook_time_minutes integer,
  servings integer DEFAULT 1,
  instructions ARRAY,
  tags ARRAY,
  image_url text,
  calories_per_serving numeric,
  protein_per_serving numeric,
  carbs_per_serving numeric,
  fat_per_serving numeric,
  fiber_per_serving numeric,
  is_public boolean DEFAULT false,
  rating numeric CHECK (rating >= 0::numeric AND rating <= 5::numeric),
  review_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT recipes_pkey PRIMARY KEY (id),
  CONSTRAINT recipes_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.recommendation_feedback (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  recommendation_id uuid NOT NULL,
  user_id uuid NOT NULL,
  feedback_type text NOT NULL CHECK (feedback_type = ANY (ARRAY['accepted'::text, 'rejected'::text, 'completed'::text, 'helpful'::text, 'not_helpful'::text])),
  feedback_text text,
  rating integer CHECK (rating >= 1 AND rating <= 5),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT recommendation_feedback_pkey PRIMARY KEY (id),
  CONSTRAINT recommendation_feedback_recommendation_id_fkey FOREIGN KEY (recommendation_id) REFERENCES public.coach_recommendations(id),
  CONSTRAINT recommendation_feedback_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.rest_timer_preferences (
  user_id uuid NOT NULL,
  default_rest_seconds integer DEFAULT 90,
  auto_start_timer boolean DEFAULT true,
  sound_enabled boolean DEFAULT true,
  vibration_enabled boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT rest_timer_preferences_pkey PRIMARY KEY (user_id),
  CONSTRAINT rest_timer_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.restaurant_chains (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  logo_url text,
  website_url text,
  menu_api_endpoint text,
  last_menu_sync timestamp with time zone,
  is_active boolean DEFAULT true,
  location_count integer,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT restaurant_chains_pkey PRIMARY KEY (id)
);
CREATE TABLE public.restaurant_menu_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid NOT NULL,
  food_id uuid NOT NULL,
  menu_category text,
  menu_subcategory text,
  price_usd numeric,
  is_available boolean DEFAULT true,
  is_seasonal boolean DEFAULT false,
  is_limited_time boolean DEFAULT false,
  customization_options jsonb DEFAULT '[]'::jsonb,
  allergen_info jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT restaurant_menu_items_pkey PRIMARY KEY (id),
  CONSTRAINT restaurant_menu_items_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurant_chains(id),
  CONSTRAINT restaurant_menu_items_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods_enhanced(id)
);
CREATE TABLE public.set_performances (
  id integer NOT NULL DEFAULT nextval('set_performances_id_seq'::regclass),
  user_id uuid,
  session_id integer,
  exercise_id integer,
  set_number integer NOT NULL,
  target_reps integer,
  actual_reps integer,
  weight_kg numeric,
  rpe integer CHECK (rpe >= 1 AND rpe <= 10),
  rest_taken_seconds integer,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT set_performances_pkey PRIMARY KEY (id),
  CONSTRAINT set_performances_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT set_performances_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.active_workout_sessions(id)
);
CREATE TABLE public.strava_connections (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE,
  strava_athlete_id bigint NOT NULL,
  access_token text NOT NULL,
  refresh_token text NOT NULL,
  expires_at timestamp with time zone NOT NULL,
  athlete_data jsonb,
  scope text,
  connected_at timestamp with time zone DEFAULT now(),
  last_sync_at timestamp with time zone,
  sync_enabled boolean DEFAULT true,
  CONSTRAINT strava_connections_pkey PRIMARY KEY (id),
  CONSTRAINT strava_connections_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.user_active_programs (
  user_id uuid NOT NULL,
  program_id uuid NOT NULL,
  started_at timestamp with time zone DEFAULT now(),
  current_day integer DEFAULT 1,
  last_activity_date date,
  auto_advance_days boolean DEFAULT true,
  notification_preferences jsonb DEFAULT '{}'::jsonb,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_active_programs_pkey PRIMARY KEY (user_id),
  CONSTRAINT user_active_programs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_active_programs_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.ai_generated_programs(id)
);
CREATE TABLE public.user_context_embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  content_type text NOT NULL CHECK (content_type = ANY (ARRAY['workout'::text, 'goal'::text, 'conversation'::text, 'progress'::text, 'exercise'::text, 'achievement'::text])),
  content text NOT NULL,
  metadata jsonb DEFAULT '{}'::jsonb,
  embedding USER-DEFINED NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_context_embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT user_context_embeddings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_context_summaries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  period_type text NOT NULL CHECK (period_type = ANY (ARRAY['weekly'::text, 'monthly'::text, 'quarterly'::text, 'yearly'::text])),
  period_start date NOT NULL,
  period_end date NOT NULL,
  activity_summary jsonb DEFAULT '{}'::jsonb,
  nutrition_summary jsonb DEFAULT '{}'::jsonb,
  key_achievements ARRAY DEFAULT ARRAY[]::text[],
  challenges_faced ARRAY DEFAULT ARRAY[]::text[],
  body_composition_change jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_context_summaries_pkey PRIMARY KEY (id),
  CONSTRAINT user_context_summaries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_custom_workouts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  exercises jsonb,
  duration_minutes integer,
  difficulty text CHECK (difficulty = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text])),
  tags ARRAY,
  is_public boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_custom_workouts_pkey PRIMARY KEY (id),
  CONSTRAINT user_custom_workouts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_exercises (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  user_id uuid NOT NULL,
  name text NOT NULL,
  category text,
  muscle_group text,
  equipment text,
  instructions ARRAY,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_exercises_pkey PRIMARY KEY (id),
  CONSTRAINT user_exercises_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.user_food_frequency (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  food_id uuid NOT NULL,
  log_count integer DEFAULT 1,
  last_quantity numeric,
  last_unit USER-DEFINED,
  last_logged_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  total_quantity_logged numeric DEFAULT 0,
  favorite boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_food_frequency_pkey PRIMARY KEY (id),
  CONSTRAINT user_food_frequency_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_food_frequency_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.user_goals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  goal_type USER-DEFINED NOT NULL,
  goal_description text NOT NULL,
  target_value numeric,
  target_unit text,
  target_date date,
  priority integer DEFAULT 1 CHECK (priority >= 1 AND priority <= 5),
  status USER-DEFINED DEFAULT 'active'::goal_status,
  is_active boolean DEFAULT true,
  progress_value numeric DEFAULT 0,
  progress_notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT user_goals_pkey PRIMARY KEY (id),
  CONSTRAINT user_goals_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_meal_patterns (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  meal_category USER-DEFINED,
  typical_time time without time zone,
  food_id uuid,
  frequency integer DEFAULT 1,
  day_of_week integer,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_meal_patterns_pkey PRIMARY KEY (id),
  CONSTRAINT user_meal_patterns_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_meal_patterns_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.user_memory_facts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  fact_type character varying NOT NULL CHECK (fact_type::text = ANY (ARRAY['preference'::character varying, 'goal'::character varying, 'constraint'::character varying, 'achievement'::character varying, 'routine'::character varying]::text[])),
  content text NOT NULL,
  confidence double precision DEFAULT 0.8 CHECK (confidence >= 0::double precision AND confidence <= 1::double precision),
  source character varying DEFAULT 'conversation'::character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  is_active boolean DEFAULT true,
  CONSTRAINT user_memory_facts_pkey PRIMARY KEY (id),
  CONSTRAINT user_memory_facts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_milestones (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  milestone_type text NOT NULL CHECK (milestone_type = ANY (ARRAY['achievement'::text, 'injury'::text, 'goal_completed'::text, 'pr'::text, 'life_event'::text, 'setback'::text])),
  title text NOT NULL,
  description text,
  occurred_at date NOT NULL,
  impact_level text CHECK (impact_level = ANY (ARRAY['high'::text, 'medium'::text, 'low'::text])),
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_milestones_pkey PRIMARY KEY (id),
  CONSTRAINT user_milestones_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_nutrition_preferences (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  preferred_units USER-DEFINED DEFAULT 'g'::food_unit,
  default_meal_category USER-DEFINED DEFAULT 'other'::meal_category,
  track_water boolean DEFAULT true,
  track_micronutrients boolean DEFAULT false,
  dietary_restrictions ARRAY,
  allergens ARRAY,
  daily_calorie_goal numeric,
  daily_protein_goal numeric,
  daily_carbs_goal numeric,
  daily_fat_goal numeric,
  daily_fiber_goal numeric,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_nutrition_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT user_nutrition_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_onboarding (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  primary_goal text NOT NULL CHECK (primary_goal = ANY (ARRAY['build_muscle'::text, 'lose_fat'::text, 'improve_endurance'::text, 'increase_strength'::text, 'sport_performance'::text, 'general_health'::text, 'rehab_recovery'::text])),
  user_persona text NOT NULL CHECK (user_persona = ANY (ARRAY['strength_athlete'::text, 'bodybuilder'::text, 'endurance_runner'::text, 'triathlete'::text, 'crossfit_athlete'::text, 'team_sport_athlete'::text, 'general_fitness'::text, 'beginner_recovery'::text])),
  current_activity_level text NOT NULL CHECK (current_activity_level = ANY (ARRAY['sedentary'::text, 'lightly_active'::text, 'moderately_active'::text, 'very_active'::text])),
  desired_training_frequency integer NOT NULL CHECK (desired_training_frequency >= 3 AND desired_training_frequency <= 7),
  biological_sex text NOT NULL CHECK (biological_sex = ANY (ARRAY['male'::text, 'female'::text])),
  age integer NOT NULL CHECK (age >= 18 AND age <= 80),
  current_weight_kg numeric NOT NULL CHECK (current_weight_kg > 0::numeric),
  height_cm numeric NOT NULL CHECK (height_cm > 0::numeric),
  daily_meal_preference integer NOT NULL CHECK (daily_meal_preference = ANY (ARRAY[2, 3, 4, 5, 6])),
  training_time_preferences ARRAY DEFAULT ARRAY[]::text[],
  dietary_restrictions ARRAY DEFAULT ARRAY[]::text[],
  equipment_access ARRAY DEFAULT ARRAY[]::text[],
  injury_limitations ARRAY DEFAULT ARRAY[]::text[],
  experience_level text NOT NULL CHECK (experience_level = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text, 'expert'::text])),
  completed boolean NOT NULL DEFAULT false,
  completed_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  city text,
  location_permission boolean DEFAULT false,
  facility_access ARRAY DEFAULT ARRAY[]::text[],
  CONSTRAINT user_onboarding_pkey PRIMARY KEY (id),
  CONSTRAINT user_onboarding_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_preference_profiles (
  user_id uuid NOT NULL,
  workout_preferences jsonb DEFAULT '{}'::jsonb,
  nutrition_preferences jsonb DEFAULT '{}'::jsonb,
  communication_style jsonb DEFAULT '{}'::jsonb,
  constraints jsonb DEFAULT '{}'::jsonb,
  motivators ARRAY,
  coaching_notes text,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_preference_profiles_pkey PRIMARY KEY (user_id),
  CONSTRAINT user_preference_profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_preferences (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  unit_system text DEFAULT 'metric'::text CHECK (unit_system = ANY (ARRAY['metric'::text, 'imperial'::text])),
  default_activity_view text DEFAULT 'list'::text CHECK (default_activity_view = ANY (ARRAY['list'::text, 'grid'::text, 'calendar'::text])),
  activities_per_page integer DEFAULT 20 CHECK (activities_per_page >= 10 AND activities_per_page <= 100),
  activities_public boolean DEFAULT false,
  share_stats boolean DEFAULT false,
  workout_reminders boolean DEFAULT true,
  achievement_notifications boolean DEFAULT true,
  weekly_summary boolean DEFAULT true,
  auto_pause boolean DEFAULT true,
  countdown_seconds integer DEFAULT 3,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT user_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_profile_embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  profile_text text NOT NULL,
  embedding USER-DEFINED,
  last_updated timestamp with time zone NOT NULL DEFAULT now(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_profile_embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT user_profile_embeddings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_program_enrollments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  program_id uuid NOT NULL,
  enrolled_at timestamp with time zone DEFAULT now(),
  started_at timestamp with time zone,
  completed_at timestamp with time zone,
  current_day integer DEFAULT 1,
  days_completed integer DEFAULT 0,
  total_sessions_completed integer DEFAULT 0,
  status text DEFAULT 'enrolled'::text CHECK (status = ANY (ARRAY['enrolled'::text, 'active'::text, 'paused'::text, 'completed'::text, 'discontinued'::text])),
  adherence_percentage numeric CHECK (adherence_percentage >= 0::numeric AND adherence_percentage <= 100::numeric),
  average_rating numeric CHECK (average_rating >= 0::numeric AND average_rating <= 5::numeric),
  final_rating integer CHECK (final_rating >= 1 AND final_rating <= 5),
  would_recommend boolean,
  completion_notes text,
  custom_modifications jsonb DEFAULT '{}'::jsonb,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_program_enrollments_pkey PRIMARY KEY (id),
  CONSTRAINT user_program_enrollments_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_program_enrollments_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.workout_programs(id)
);
CREATE TABLE public.user_quick_foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  food_id uuid NOT NULL,
  display_order integer DEFAULT 0,
  category text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_quick_foods_pkey PRIMARY KEY (id),
  CONSTRAINT user_quick_foods_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_quick_foods_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.user_settings (
  user_id uuid NOT NULL,
  preferred_workout_days ARRAY DEFAULT ARRAY['monday'::text, 'wednesday'::text, 'friday'::text],
  preferred_workout_time time without time zone,
  notifications_enabled boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  auto_sync_activities boolean DEFAULT true,
  preferred_units text DEFAULT 'metric'::text CHECK (preferred_units = ANY (ARRAY['metric'::text, 'imperial'::text])),
  default_activity_privacy text DEFAULT 'private'::text CHECK (default_activity_privacy = ANY (ARRAY['private'::text, 'friends'::text, 'public'::text])),
  watch_type text CHECK (watch_type = ANY (ARRAY['apple_watch'::text, 'garmin'::text, 'fitbit'::text, 'polar'::text, 'suunto'::text, 'wahoo'::text, 'other'::text])),
  CONSTRAINT user_settings_pkey PRIMARY KEY (user_id),
  CONSTRAINT user_settings_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.user_submitted_foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  submitted_by uuid NOT NULL,
  food_name text NOT NULL,
  brand_name text,
  barcode text,
  serving_size numeric,
  serving_unit text,
  nutrition_data jsonb NOT NULL,
  proof_images ARRAY,
  submission_notes text,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'in_review'::text, 'approved'::text, 'rejected'::text, 'needs_info'::text])),
  reviewed_by uuid,
  review_notes text,
  rejection_reason text,
  approved_food_id uuid,
  upvotes integer DEFAULT 0,
  downvotes integer DEFAULT 0,
  report_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  reviewed_at timestamp with time zone,
  CONSTRAINT user_submitted_foods_pkey PRIMARY KEY (id),
  CONSTRAINT user_submitted_foods_submitted_by_fkey FOREIGN KEY (submitted_by) REFERENCES auth.users(id),
  CONSTRAINT user_submitted_foods_reviewed_by_fkey FOREIGN KEY (reviewed_by) REFERENCES auth.users(id),
  CONSTRAINT user_submitted_foods_approved_food_id_fkey FOREIGN KEY (approved_food_id) REFERENCES public.foods_enhanced(id)
);
CREATE TABLE public.user_workouts (
  id integer NOT NULL DEFAULT nextval('user_workouts_id_seq'::regclass),
  user_id uuid,
  workout_id integer,
  scheduled_date date NOT NULL,
  completed boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  status text DEFAULT 'scheduled'::text CHECK (status = ANY (ARRAY['scheduled'::text, 'active'::text, 'paused'::text, 'completed'::text, 'cancelled'::text])),
  started_at timestamp with time zone,
  paused_at timestamp with time zone,
  paused_duration_seconds integer DEFAULT 0,
  current_exercise_index integer DEFAULT 0,
  current_set_index integer DEFAULT 0,
  CONSTRAINT user_workouts_pkey PRIMARY KEY (id),
  CONSTRAINT user_workouts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT user_workouts_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.webhook_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  source text NOT NULL,
  event_type text NOT NULL,
  object_type text,
  object_id text,
  athlete_id bigint,
  payload jsonb,
  processed boolean DEFAULT false,
  processed_at timestamp with time zone,
  error text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT webhook_events_pkey PRIMARY KEY (id)
);
CREATE TABLE public.workout_completions (
  id integer NOT NULL DEFAULT nextval('workout_completions_id_seq'::regclass),
  user_id uuid,
  user_workout_id integer,
  workout_id integer,
  started_at timestamp with time zone,
  completed_at timestamp with time zone DEFAULT now(),
  notes text,
  rpe integer CHECK (rpe >= 1 AND rpe <= 10),
  mood text CHECK (mood = ANY (ARRAY['great'::text, 'good'::text, 'okay'::text, 'tired'::text, 'exhausted'::text])),
  energy_level integer CHECK (energy_level >= 1 AND energy_level <= 5),
  workout_rating integer CHECK (workout_rating >= 1 AND workout_rating <= 5),
  difficulty_rating integer CHECK (difficulty_rating >= 1 AND difficulty_rating <= 10),
  would_repeat boolean DEFAULT true,
  total_pause_duration_seconds integer DEFAULT 0,
  duration_minutes integer,
  embedding USER-DEFINED,
  CONSTRAINT workout_completions_pkey PRIMARY KEY (id),
  CONSTRAINT workout_completions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT workout_completions_user_workout_id_fkey FOREIGN KEY (user_workout_id) REFERENCES public.user_workouts(id),
  CONSTRAINT workout_completions_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.workout_programs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  original_name text,
  subtitle text,
  description text,
  wagner_category text NOT NULL,
  wagner_collection text NOT NULL,
  routine_number integer,
  total_days integer DEFAULT 6,
  program_type text CHECK (program_type = ANY (ARRAY['bodybuilding'::text, 'functional'::text, 'power_bodybuilding'::text, 'glute_focus'::text, 'chest_focus'::text, 'back_focus'::text, 'leg_focus'::text, 'circuit_training'::text, 'periodization'::text])),
  gender text CHECK (gender = ANY (ARRAY['men'::text, 'women'::text, 'unisex'::text])),
  experience_level text DEFAULT 'intermediate'::text CHECK (experience_level = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text])),
  primary_goals ARRAY,
  focus_areas ARRAY,
  equipment_required ARRAY DEFAULT ARRAY['bodyweight'::text],
  difficulty_level integer DEFAULT 5 CHECK (difficulty_level >= 1 AND difficulty_level <= 10),
  estimated_duration_minutes integer DEFAULT 60,
  popularity_score integer DEFAULT 0,
  completion_rate numeric CHECK (completion_rate >= 0::numeric AND completion_rate <= 100::numeric),
  average_rating numeric CHECK (average_rating >= 0::numeric AND average_rating <= 5::numeric),
  created_by uuid,
  is_public boolean DEFAULT true,
  is_verified boolean DEFAULT true,
  requires_premium boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_programs_pkey PRIMARY KEY (id),
  CONSTRAINT workout_programs_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.workout_tags (
  id integer NOT NULL DEFAULT nextval('workout_tags_id_seq'::regclass),
  name text NOT NULL UNIQUE,
  category text CHECK (category = ANY (ARRAY['equipment'::text, 'muscle_group'::text, 'difficulty'::text, 'goal'::text, 'duration'::text])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_tags_pkey PRIMARY KEY (id)
);
CREATE TABLE public.workout_templates (
  id integer NOT NULL DEFAULT nextval('workout_templates_id_seq'::regclass),
  user_id uuid,
  name text NOT NULL,
  description text,
  based_on_workout_id integer,
  is_public boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_templates_pkey PRIMARY KEY (id),
  CONSTRAINT workout_templates_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT workout_templates_based_on_workout_id_fkey FOREIGN KEY (based_on_workout_id) REFERENCES public.workouts(id)
);
CREATE TABLE public.workout_workout_tags (
  workout_id integer NOT NULL,
  tag_id integer NOT NULL,
  CONSTRAINT workout_workout_tags_pkey PRIMARY KEY (tag_id, workout_id),
  CONSTRAINT workout_workout_tags_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id),
  CONSTRAINT workout_workout_tags_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES public.workout_tags(id)
);
CREATE TABLE public.workouts (
  id integer NOT NULL DEFAULT nextval('workouts_id_seq'::regclass),
  name text NOT NULL,
  type text NOT NULL CHECK (type = ANY (ARRAY['push'::text, 'pull'::text, 'legs'::text, 'upper'::text, 'lower'::text, 'full_body'::text, 'arms'::text, 'shoulders'::text, 'chest'::text, 'back'::text, 'core'::text, 'cardio'::text])),
  goal text CHECK (goal = ANY (ARRAY['build_muscle'::text, 'lose_weight'::text, 'gain_strength'::text, 'all'::text])),
  duration_minutes integer,
  difficulty text CHECK (difficulty = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text])),
  created_at timestamp with time zone DEFAULT now(),
  estimated_duration_minutes integer DEFAULT 45,
  description text,
  popularity_score integer DEFAULT 0,
  user_id uuid,
  is_public boolean NOT NULL DEFAULT false,
  CONSTRAINT workouts_pkey PRIMARY KEY (id),
  CONSTRAINT workouts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);